# Змінна для контролю кількості виведених рядків (наразі не імплементовано)
lines = 0

# Константи для курсору в консолі.
go_up = "\033[A"  # Переміщення на одну позицію символу вгору,
go_dn = "\033[B"  # ... вниз,
go_rt = "\033[C"  # ... вправо,
go_lf = "\033[D"  # ... вліво.
r_cln = "\033[K"  # Очищення всього що є після курсору.

# Стилі для типових повідомлень
STYLE_INFO    = '*7'  # сірий жирний
STYLE_SUCCESS = '*2'  # зелений жирний
STYLE_ERROR   = '*1'  # червоний жирний
STYLE_WARNING = '0d'  # чорний текст на червоному фоні

def view(s: str, args='', reset=True):
    '''
    *Повертає рядок з кольоровим оформленням і ефектами.*
    
    ### Комбінованні значення для `args`
    * Можна комбінувати ефект`¹`, колір шрифта`²` і фону`³`.
    * Лише по одному значенню для кожного. Наприклад: `*1d` буде червоний жирний шрифт і жовтий фон.
    * Флаг `reset` означає що після цього тексту форматування буде скинуте до базового.

    **Таблиця підстановки кольорів:**
    |       **Шрифт**       |      **Фон**      |  **Колір**   |
    |:---------------------:|:-----------------:|:------------:|
    |          `0`          |        `a`        | *Чорний*     |
    |          `1`          |        `b`        | *Червоний*   |
    |          `2`          |        `c`        | *Зелений*    |
    |          `3`          |        `d`        | *Жовтий*     |
    |          `4`          |        `e`        | *Синій*      |
    |          `5`          |        `f`        | *Фіолетовий* |
    |          `6`          |        `g`        | *Бірюзовий*  |
    |          `7`          |        `h`        | *Білий*      |

    **Додаткові ефекти:**  
    |    **Символ**      |    **Ефект**     |
    |:------------------:|:----------------:|
    |`*`<br>*(зірочка)*  | **жирний**       |
    |`-`<br>*(дефіс)*    | **підкреслений** |
    |`'`<br>*(апостроф)* | **невидимий**    |
    '''

    repl = {
        '0': '30', '1': '31', '2': '32', '3': '33', '4': '34', '5': '35', '6': '36', '7': '37',
        'a': '40', 'b': '41', 'c': '42', 'd': '43', 'e': '44', 'f': '45', 'g': '46', 'h': '47',
        '*': '1', '-': '4', "'": '8'
    }

    args = ";".join(repl[ch] for ch in args if ch in repl)
    result = ''
    if args:
        result += '\033[' + args + 'm'
    result += s
    if reset:
        result += '\033[0m'
    return result

def higlight_cmd(s: str) -> str:
    '''Повертає форматовану **команду**'''
    return view(s, '*2')

def person(name: str) -> str:
    '''Повертає форматоване **ім'я** контакту'''
    return view(name, '5')

def phone(number: str) -> str:
    '''Повертає форматований **номер** телефону'''
    return view(number, '6')

def prn(s: str, end=None):
    '''Друкує рядок як з `print`, але додатково контролює кількість надрукованих рядків'''
    print(s, end=end)
    global lines
    lines += s.count("\n") + 1

def lines_clean():
    '''Метод для очистки попередніх непотрібних рядків в консолі... (не реалізовано)'''
    return

def clear_screen(*args, **kwargs):
    '''Очищує екран і повертає курсор у лівий верхній кут'''
    print("\033[H\033[J", end='')

def warn(s: str):
    '''Попереджувальне повідомлення'''
    prn(view(" !!! ", STYLE_WARNING) + ' ' + s)

def info(s: str):
    '''Інформаційне повідомлення'''
    prn(view(s, STYLE_INFO))

def success(s: str):
    '''Повідомлення про успішну дію'''
    prn(view(s, STYLE_SUCCESS))

def error(s: str):
    '''Повідомлення про помилку'''
    prn(view(s, STYLE_ERROR))

def show_contact(name: str, number: str):
    '''Виводить один контакт у форматі: Ім'я + номер'''
    prn(f"Знайдено запис для {person(name)} з номером {phone(number)}.")

def contact_found(name: str, number: str):
    '''Виводить повідомлення про знайдений контакт'''
    prn(f"Знайдено контакт: {person(name)} — {phone(number)}")

def contact_already_exists(name: str):
    '''Повідомляє, що такий контакт вже існує'''
    warn(f"Контакт з ім'ям {person(name)} вже існує. Для зміни використайте команду {higlight_cmd('change')}")

def contact_added(name: str, number: str):
    '''Підтвердження про додавання нового контакта'''
    success(f"Контакт {person(name)} з номером {phone(number)} додано.")

def contact_changed(name: str, number: str):
    '''Повідомлення про зміну номера телефону'''
    success(f"Номер для {person(name)} було змінено на {phone(number)}.")

def contact_deleted(name: str):
    '''Підтвердження про видалення контакта'''
    success(f"Контакт на ім'я {person(name)} було видалено.")

def contacts_not_found():
    '''Повідомлення, що немає жодного запису у списку'''
    warn("До списку контактів ще не додано жодного запису.")

def unknown_command(cmd: str):
    '''Повідомлення у разі введення невідомої команди'''
    lines_clean()
    if cmd != '':
        warn(f"Невідома команда '{higlight_cmd(cmd)}'. Спробуйте ще раз уважніше. ")
    prn(f"Не знаєте команд? Тоді введіть '{higlight_cmd('?')}' для виклику інформації про доступні команди.")
    global lines
    lines += 2

def show_all_contacts(contacts: dict):
    '''Виводить список усіх збережених контактів'''
    if not contacts:
        contacts_not_found()
        return
    keys = sorted(contacts.keys())
    prn(f"Кількість осіб в контактах: {view(str(len(keys)), '*3')}")
    for name in keys:
        number = contacts[name]
        prn(f' > {person(name)} - {phone(number)}')

def show_help():
    '''Виводить список доступних команд з коротким описом'''
    prn(view(' Ось перелік команд: ', '*0h'))

    # hi
    s = f"{higlight_cmd('hi')} / {higlight_cmd('hello')} / {higlight_cmd('привіт')}  "
    prn(f"{s} - генерує випадкове привітання.")

    # exit
    s = f"{higlight_cmd('exit')} / {higlight_cmd('close')} / {higlight_cmd('quit')}  "
    prn(f"{s} - вихід з програми.")

    # add
    s = f"{higlight_cmd('add')} {person('<name>')} {phone('<phone>')}   "
    prn(f"{s} - додати до списку контактів особу і її номер. Можна використовувати лише нове ім'я.")

    # change
    s = f"{higlight_cmd('change')} {person('<name>')} {phone('<phone>')}"
    prn(f"{s} - змінити номер особи зі списку контактів. Такий запис має існувати в списку контактів. Тож, спочатку додайте його.")

    # remove
    s = f"{higlight_cmd('remove')} {person('<name>')}        "
    prn(f"{s} - видалити запис зі списку контактів. Звісно ж такий запис теж повинен існувати в списку контактів.")

    # phone
    s = f"{higlight_cmd('phone')} {person('<name>')}         "
    prn(f"{s} - відобразити номер особи зі списку контактів. Також запис має існувати в списку контактів.")

    # all
    s = f"{higlight_cmd('all')}                  "
    prn(f"{s} - відобразити всі записи осіб зі списку контактів разом з номерами.")

    # clr
    s = f"{higlight_cmd('clr')}                  "
    prn(f"{s} - очистити екран від попередніх записів.")

    # ?
    s = f"{higlight_cmd('?')}                    "
    prn(f"{s} - викликає цю справку.")

def ask() -> str:
    '''Запит команди у користувача'''
    prn(view("▶ ", '*5h') + view("Введіть команду: ", '*h'), end=' ')
    return input()
