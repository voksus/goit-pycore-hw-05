import time
import random as rnd
import view as v
import model as mdl
from functools import wraps

rnd.seed(time.perf_counter())

def input_error(func):
    '''
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.
    –í—ñ–Ω –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î –ø–æ–º–∏–ª–∫–∏ KeyError, ValueError, IndexError —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    –¢–∞–∫–æ–∂ –ø–æ–≤–µ—Ä—Ç–∞—î –±—É–ª–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ, —â–æ–± —Å–∏–≥–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ –ø–æ—Ç—Ä–µ–±—É –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏.
    '''
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            result = func(*args, **kwargs)
            return result if result else False
        except KeyError:
            v.error("–ö–æ–Ω—Ç–∞–∫—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except ValueError:
            v.error("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.")
        except IndexError:
            v.error("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –±–µ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.")
        return False
    return wrapper

def parse_input(cmd: str) -> tuple[str, list[str]]:
    '''–†–æ–∑–¥—ñ–ª—è—î –≤–≤–µ–¥–µ–Ω—É –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ —ñ —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤'''
    parts = cmd.split()
    command = parts[0].lower()
    args = parts[1:] if len(parts) > 1 else []
    return command, args

def sanitize_input(name: str, number: str):
    '''
    –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ/–Ω–æ–º–µ—Ä–∞ –≤—ñ–¥ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ CSV.
    –ó–∞–º—ñ–Ω—é—î —Å–∏–º–≤–æ–ª–∏ ',', '"' —Ç–∞ —ñ–Ω—à—ñ –Ω–µ–±–∞–∂–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –Ω–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è '_'.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ (–æ—á–∏—â–µ–Ω–µ_—ñ–º'—è, –æ—á–∏—â–µ–Ω–∏–π_–Ω–æ–º–µ—Ä).
    –í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–∏—à–µ —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ.
    '''
    msg_parts = []
    if any(c in name for c in [',', '"']):
        name = ''.join('_' if c in [',', '"'] else c for c in name)
        msg_parts.append("–Ü–º‚Äô—è")
    if any(c in number for c in [',', '"']):
        number = ''.join('_' if c in [',', '"'] else c for c in number)
        msg_parts.append("–Ω–æ–º–µ—Ä")
    if msg_parts:
        prefix = " —Ç–∞ ".join(msg_parts).capitalize()
        note = f"{prefix} –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏. –á—Ö –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –Ω–∏–∂–Ω—î –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è '_'"
        v.warn(note)
    return name, number

def get_cmd() -> str:
    '''–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ view (MVC –ø—ñ–¥—Ö—ñ–¥)'''
    return v.ask().strip()

def quit(args=None, contacts=None):
    '''–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏'''
    v.info("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è üëã")
    exit(0)

def hello(args=None, contacts=None):
    '''–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É'''
    v.lines_clean()
    options = (
        '–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?', '–í—ñ—Ç–∞—é! –Ø —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏.', '–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –Ø –¥–æ –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥.',
        '–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?', '–ì–µ–π, —è–∫ —Å—è –º–∞—î—à?', '–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! –©–æ —Ç—Ä–µ–±–∞? üòâ', '–ì–µ–π! –ß–µ–∫–∞—é –Ω–∞ —Ç–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏.',
        '–ô–æ! –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ —Ä–æ–±–∏–º–æ?', '–û, –ø—Ä–∏–≤—ñ—Ç—É–ª—ñ!', '–°–ª—É—Ö–∞—é —É–≤–∞–∂–Ω–æ ü§ñ', '–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏, –¥—Ä—É–∂–µ?',
        '–í—ñ—Ç–∞—é! –Ø–∫ –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º?', '–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?', '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—à—É! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?',
        '–°–µ—Ä–≤—ñ—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –©–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ?', '–ë—ñ–ø-–±—É–ø! –†–æ–±–æ–±–æ—Ç –¥–æ –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥! ü§ñ',
        '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–≤—ñ—á–ª–∏–≤–æ—Å—Ç—ñ... 100% ‚Äì –ü—Ä–∏–≤—ñ—Ç!', '–•—Ç–æ—Å—å –≤–∏–∫–ª–∏–∫–∞–≤ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç? üëÄ',
        '–ü—Ä–∏–≤—ñ—Ç, –ª—é–¥—Å—å–∫–∞ —ñ—Å—Ç–æ—Ç–æ! –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ?', '–•–µ–π! –î–∞–≤–∞–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏! üöÄ', '–ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫—ñ –±—É–ª–∏! –©–æ —Ç—Ä–µ–±–∞?',
        '–ü–æ—ó—Ö–∞–ª–∏! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!', '–ì–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–ª–∏–∫—É! –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ?', '–Ø —Ç—É—Ç! –ü–æ—á–Ω—ñ–º–æ.',
        '–ê–¥—Ä–µ—Å–Ω–∞ –∫–Ω–∏–≥–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞! –©–æ —Ä–æ–±–∏–º–æ?', '–ó–∞–ø–∏—Ç–∏ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è! –ß–∏–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?',
        '–ö–æ–≥–æ—Å—å —à—É–∫–∞—î–º–æ? –Ø –≥–æ—Ç–æ–≤–∏–π!', '–ö–æ–Ω—Ç–∞–∫—Ç–∏? –ö–æ–º–∞–Ω–¥–∏? –©–æ —Ü—ñ–∫–∞–≤–∏—Ç—å?', '–ü–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–±–æ—Ç—É. –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É.'
    )
    v.info(options[rnd.randint(0, len(options) - 1)])
    v.lines += 1

@input_error
def add_contact(args, contacts):
    '''–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç (—è–∫—â–æ —ñ–º‚Äô—è —â–µ –Ω–µ —ñ—Å–Ω—É—î)'''
    if len(args) != 2:
        raise ValueError
    name, number = sanitize_input(*args)
    if name in contacts:
        v.contact_already_exists(name)
        return False
    contacts[name] = number
    v.contact_added(name, number)
    return True

@input_error
def change_contact(args, contacts):
    '''–ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞'''
    if len(args) != 2:
        raise KeyError
    name, number = sanitize_input(*args)
    if name not in contacts:
        raise KeyError
    contacts[name] = number
    v.contact_changed(name, number)
    return True

@input_error
def remove_contact(args, contacts:dict):
    '''–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑ –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏'''
    if len(args) != 1:
        raise IndexError
    name = args[0]
    if name not in contacts:
        raise KeyError
    contacts.pop(name)
    v.contact_deleted(name)
    return True

@input_error
def show_phone(args, contacts):
    '''–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞'''
    if len(args) != 1:
        raise IndexError
    name = args[0]
    if name not in contacts:
        raise KeyError
    v.contact_found(name, contacts[name])

def show_all(args=None, contacts=None):
    '''–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏'''
    if not contacts:
        v.contacts_not_found()
    else:
        v.show_all_contacts(contacts)

def help(args=None, contacts=None):
    '''–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É (—Å–ø—Ä–∞–≤–∫—É)'''
    v.show_help()

def unknown_command(cmd: str):
    '''–û–±—Ä–æ–±–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏'''
    v.lines_clean()
    v.unknown_command(cmd)
    v.lines += 1

COMMANDS = {
    'hi': hello,
    'hello': hello,
    '–ø—Ä–∏–≤—ñ—Ç': hello,
    'quit': quit,
    'exit': quit,
    'close': quit,
    'add': add_contact,
    'change': change_contact,
    'remove': remove_contact,
    'phone': show_phone,
    'all': show_all,
    'clr': v.clear_screen,
    '?': help
}

def execute(command: str, args: list[str], contacts: dict):
    '''–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∑–º—ñ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ'''
    handler = COMMANDS.get(command)
    if handler:
        was_changed = handler(args, contacts)
        if command in ('add', 'change', 'remove') and was_changed:
            mdl.save_contacts(contacts)
    else:
        unknown_command(command)
